
# These settings configure the database connection for ScalikeJDBC and the akka-persistence-jdbc plugin
sharddb.jdbc-connection-settings {
    pgbd1{
        driver = "org.postgresql.Driver"

        # the following properties must be filled with the production values
        # they can be set using -D arguments, eg: -jdbc-connection-settings.user=the-production-user
        url = "jdbc:postgresql://localhost:5432/trs-task?reWriteBatchedInserts=true"
        user = "trs-task"
        password = "trs-task"

        # the following properties are used to configure the
        # Hikari connection pool used on the read-side (akka-projections)
        connection-pool {
            # How many connections should be available to from the pool?
            # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
            max-pool-size = ${akka.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

            # How long should we wait (in millis) before it times out?
            # In a normal scenario, we should always be able to get a connection
            # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
            # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
            # Hence the low timout (note, 250 is lowest value hikari accepts)
            timeout = 250ms
        }
    }

    pgbd2{
        driver = "org.postgresql.Driver"

        # the following properties must be filled with the production values
        # they can be set using -D arguments, eg: -jdbc-connection-settings.user=the-production-user
        url = "jdbc:postgresql://localhost:5432/trs-task?reWriteBatchedInserts=true"
        user = "trs-task"
        password = "trs-task"

        # the following properties are used to configure the
        # Hikari connection pool used on the read-side (akka-projections)
        connection-pool {
            # How many connections should be available to from the pool?
            # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
            max-pool-size = ${akka.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

            # How long should we wait (in millis) before it times out?
            # In a normal scenario, we should always be able to get a connection
            # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
            # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
            # Hence the low timout (note, 250 is lowest value hikari accepts)
            timeout = 250ms
        }
    }

    pgbd3{
        driver = "org.postgresql.Driver"

        # the following properties must be filled with the production values
        # they can be set using -D arguments, eg: -jdbc-connection-settings.user=the-production-user
        url = "jdbc:postgresql://localhost:5432/trs-task?reWriteBatchedInserts=true"
        user = "trs-task"
        password = "trs-task"

        # the following properties are used to configure the
        # Hikari connection pool used on the read-side (akka-projections)
        connection-pool {
            # How many connections should be available to from the pool?
            # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
            max-pool-size = ${akka.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

            # How long should we wait (in millis) before it times out?
            # In a normal scenario, we should always be able to get a connection
            # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
            # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
            # Hence the low timout (note, 250 is lowest value hikari accepts)
            timeout = 250ms
        }
    }
    pgbd4{
        driver = "org.postgresql.Driver"

        # the following properties must be filled with the production values
        # they can be set using -D arguments, eg: -jdbc-connection-settings.user=the-production-user
        url = "jdbc:postgresql://localhost:5432/trs-task?reWriteBatchedInserts=true"
        user = "trs-task"
        password = "trs-task"

        # the following properties are used to configure the
        # Hikari connection pool used on the read-side (akka-projections)
        connection-pool {
            # How many connections should be available to from the pool?
            # it's recommended to use the same value used by the blocking-jdbc-dispatcher (see above)
            max-pool-size = ${akka.projection.jdbc.blocking-jdbc-dispatcher.thread-pool-executor.fixed-pool-size}

            # How long should we wait (in millis) before it times out?
            # In a normal scenario, we should always be able to get a connection
            # If we got a thread from the blocking-jdbc-dispatcher, we should be able to get a connection.
            # If for some reason the pool can't provide a connection, it's better to let it crash and liberate the current thread.
            # Hence the low timout (note, 250 is lowest value hikari accepts)
            timeout = 250ms
        }
    }
}

scalikejdbc.global {
  loggingSQLErrors = true
  loggingConnections = false
}